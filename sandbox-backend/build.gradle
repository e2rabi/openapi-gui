plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'org.flywaydb.flyway' version '10.1.0'
	id 'com.google.cloud.tools.jib' version '3.3.1'
}
def getEnvVariable(String name, String defaultValue) {
	return System.getenv(name) ?: defaultValue
}
jib {
	from {
		image = 'gcr.io/distroless/java17-debian12'
	}
	to {
		image = "europe-southwest1-docker.pkg.dev/sandbox-431715/sandbox-docker/sandbox-ui:$version"
		auth {
			username =getEnvVariable('docker_user','_json_key')
			def dockerPassword = getEnvVariable('docker_password', '')
			if (dockerPassword) {
				password = file(dockerPassword).text
			} else {
				password = ''
			}
		}
	}
}
java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'com.google.cloud.tools:jib-core:0.23.0'
	implementation "org.springframework.boot:spring-boot-starter-security:${springSecurity}"
	implementation "org.springframework.boot:spring-boot-starter-mail:${springMail}"
	implementation "com.nimbusds:nimbus-jose-jwt:${nimbus}"
	implementation "javax.validation:validation-api:${javaxValidationVersion}"
	implementation "org.apache.commons:commons-lang3:${apacheCommonsLang3}"
	implementation "com.zaxxer:HikariCP:${hikariVersion}"
	compileOnly 'org.projectlombok:lombok'
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	implementation "org.mapstruct:mapstruct-processor:${mapstructProcessorVersion}"
	implementation "org.flywaydb:flyway-core:${flywayVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructAnnotationVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation "org.springframework.security:spring-security-test:${springSecurityTest}"
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation project(':sandbox-ui')
}
task copyReactBuild(type: Copy) {
	dependsOn ':sandbox-ui:buildReactApp'
	from file('../sandbox-ui/dist')
	into file('src/main/resources/static')
}

processResources {
	dependsOn copyReactBuild
}

tasks.named('test') {
	useJUnitPlatform()
}
